Example 1:

Input: jobs = [3,2,3], k = 3
Output: 3
Explanation: By assigning each person one job, the maximum time is 3.
Example 2:

Input: jobs = [1,2,4,7,8], k = 2
Output: 11
Explanation: Assign the jobs the following way:
Worker 1: 1, 2, 8 (working time = 1 + 2 + 8 = 11)
Worker 2: 4, 7 (working time = 4 + 7 = 11)
The maximum working time is 11.



// #include <iostream>
// #include <vector>
// #include <algorithm>
// #include <numeric>

// using namespace std;

class Solution {
public:
    bool is_possible(vector<int>& arr, int i, int n, int mid, vector<int>& worker, int k) {
        // Base case
        if (i == n) return true;

        for (int j = 0; j < k; j++) {
            // Assign current job to worker[j] if it doesn't exceed mid
            if (worker[j] + arr[i] <= mid) {
                worker[j] += arr[i];

                // Recursive call to try next job
                if (is_possible(arr, i + 1, n, mid, worker, k)) return true;

                // Backtrack
                worker[j] -= arr[i];
            }

            // If worker[j] is 0, it means we just assigned the first job to it,
            // if it fails, we can break since no further assignments to empty workers will work
            if (worker[j] == 0) break;  
        }

        return false;
    }

    int minimumTimeRequired(vector<int>& arr, int k) {
        int n = arr.size();
        
        // Sort the array in descending order
        sort(arr.begin(), arr.end(), greater<int>());
        
        // Define search space
        int low = *max_element(arr.begin(), arr.end());  // max single job time
        int high = accumulate(arr.begin(), arr.end(), 0); // total time of all jobs
        
        int ans = high;  // Initialize with the worst case (all jobs assigned to one worker)

        // Binary search to find the minimum possible maximum workload
        while (low <= high) {
            int mid = low + (high - low) / 2;

            vector<int> worker(k, 0);  // Reset worker loads

            // Check if it's possible to assign jobs with the current mid workload
            if (is_possible(arr, 0, n, mid, worker, k)) {
                ans = mid;  // Update answer if valid
                high = mid - 1;  // Try for smaller max workload
            } else {
                low = mid + 1;  // Increase the workload
            }
        }

        return ans;  // Return the minimum maximum workload
    }
};

// int main() {
//     Solution solution;

//     vector<int> jobs = {1, 2, 4, 7, 8};
//     int k = 2;
//     int minTime = solution.minimumTimeRequired(jobs, k);
//     cout << "Minimum time to finish all jobs: " << minTime << endl; // Expected output: 11

//     return 0;
// }

