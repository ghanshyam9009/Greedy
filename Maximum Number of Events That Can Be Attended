class Solution {
public:
    int maxEvents(vectfvor<vector<int>>& events) {
        int res=0;
        int m=0;
        for(auto x:events)
            m=max(m,x[1]);
        
        sort(events.begin(),events.end());
        int j=0;
        priority_queue<int,vector<int>,greater<int>> pq;
        for(int i=1;i<=m;i++)
        {
            while(!pq.empty() && pq.top()<i) // end day is less than the current day
                pq.pop();
            
            while(j<events.size() && events[j][0]==i) // put all events start at day i
                pq.push(events[j++][1]);
            
            if(!pq.empty()) // we can attend an event today
            {
                pq.pop(); // remove the event
                res++; // count that event
            }
        }
        return res;
    }
};


// class Solution {
// public:
//     static bool cmp(vector<int>& a, vector<int>& b) {
//         if (a[1] < b[1]) return true;
//         else if (a[1] == b[1]) return a[0] < b[0];
//         return false;
//     }
    
//     int maxEvents(vector<vector<int>>& events) {
//         // Step 1: Sort events based on end_time, then start_time using custom comparator
//         sort(events.begin(), events.end(), cmp);
        
//         // Step 2: Initialize set to represent days from 1 to 100000
//         set<int> days;
//         for (int i = 1; i <= 100000; ++i) {
//             days.insert(i);
//         }
        
//         // Step 3: Process events to find maximum non-overlapping events
//         int cnt = 0;
//         for (const auto& event : events) {
//             int s = event[0];
//             int e = event[1];
            
//             // Find the first day >= s
//             auto it = days.lower_bound(s);
            
//             // Check if the event can be attended
//             if (it != days.end() && *it <= e) {
//                 ++cnt;
//                 days.erase(it); // Remove the attended day from set
//             }
//         }
        
//         // Step 4: Return the count of attended events
//         return cnt;
//     }
// };
