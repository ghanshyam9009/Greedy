You are given a string s. We want to partition the string into as many parts as possible so that each letter appears in at most one part.

Note that the partition is done so that after concatenating all the parts in order, the resultant string should be s.

Return a list of integers representing the size of these parts.

 

Example 1:

Input: s = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits s into less parts.




class Solution {
public:
    vector<int> partitionLabels(string s) {
       
       unordered_map<char,int>hash;
       vector<int>ans;
       set<char>st;
       
       for(auto it:s){
           hash[it]++;
       }
     
       int i=0;
       int count=0;
       
       while(i<s.length()){
        
        do{
           st.insert(s[i]);
           hash[s[i]]--;
           if(!hash[s[i]]){
               st.erase(s[i]);
           }
           i++;
           count++;
         }while(!st.empty() && i<s.length());
       
         ans.push_back(count);
         count=0;
       }
    
       return ans;
    }
};

// class Solution {
// public:
//     vector<int> partitionLabels(string s) {
//         int hashh[26] = {0};
        
//         // Iterate in reverse to find the last occurrence of each character.
//         for (int i = s.size() - 1; i > 0; --i)
//             hashh[s[i] - 'a'] = max(i, hashh[s[i] - 'a']);
        
//         int hi = 0, sz = 0;
//         vector<int> ans;

//         // Iterate through the string to determine partitions.
//         for (int i = 0; i < s.size(); ++i) {
//             ++sz;
//             hi = max(hi, hashh[s[i] - 'a']);
            
//             // Check if the current index is the end of the partition.
//             if (i == hi) {
//                 ans.push_back(sz);
//                 sz = 0;
//             }
//         }
//         return ans;
//     }
// };
