https://www.spoj.com/problems/CHOCOLA/



#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int calculateMinimumCost(vector<int>& verticalCosts, vector<int>& horizontalCosts, int m, int n) {
    // Sort both cost vectors in descending order
    sort(verticalCosts.rbegin(), verticalCosts.rend());
    sort(horizontalCosts.rbegin(), horizontalCosts.rend());
    
    // Initialize total cost
    int totalCost = 0;
    
    // Number of vertical and horizontal breaks needed
    int numVerticalBreaks = 0;
    int numHorizontalBreaks = 0;
    
    // Indexes for cost vectors
    int verticalIndex = 0;
    int horizontalIndex = 0;
    
    // Current number of vertical and horizontal segments
    int verticalSegments = 1;
    int horizontalSegments = 1;
    
    // Process both cost lists
    while (verticalIndex < verticalCosts.size() || horizontalIndex < horizontalCosts.size()) {
        if (verticalIndex < verticalCosts.size() && (horizontalIndex >= horizontalCosts.size() || verticalCosts[verticalIndex] > horizontalCosts[horizontalIndex])) {
            // Process a vertical break
            totalCost += verticalCosts[verticalIndex] * horizontalSegments;
            numVerticalBreaks++;
            verticalSegments++;
            verticalIndex++;
        } else if (horizontalIndex < horizontalCosts.size()) {
            // Process a horizontal break
            totalCost += horizontalCosts[horizontalIndex] * verticalSegments;
            numHorizontalBreaks++;
            horizontalSegments++;
            horizontalIndex++;
        }
    }
    
    return totalCost;
}

int main() {
    int t;
    cin >> t;
    cin.ignore(); // to ignore the blank line after number of test cases
    
    for (int caseNum = 1; caseNum <= t; ++caseNum) {
        if (caseNum > 1) {
            cin.ignore(); // to ignore the blank line between test cases
        }
        
        int m, n;
        cin >> m >> n;
        
        vector<int> verticalCosts(m - 1);
        vector<int> horizontalCosts(n - 1);
        
        for (int i = 0; i < m - 1; ++i) {
            cin >> verticalCosts[i];
        }
        
        for (int i = 0; i < n - 1; ++i) {
            cin >> horizontalCosts[i];
        }
        
        int result = calculateMinimumCost(verticalCosts, horizontalCosts, m, n);
        cout << "Case #" << caseNum << ": " << result << endl;
    }
    
    return 0;
}
